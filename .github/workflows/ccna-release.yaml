name: Run CCNA Parse and Update Releases

on:
  push:
    branches: [main]
    paths:
      - 'R/**'
      - 'formats/**'
      - 'ccna-library-parse.R'
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install R packages
        shell: bash
        run: |
          Rscript -e 'install.packages(c(
            "rvest","dplyr","fs","zip","writexl","stringr",
            "httr","jsonlite","readr","purrr","digest"
          ))'

      - name: Run parsing script and capture output
        shell: bash
        run: |
          mkdir -p output/zips
          Rscript R/scrpits/ccna-library-parse.R output/zips | tee console_output.log

      - name: Create or update releases and upload files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          # Determine unique tags (prefix before first dash)
          tags=$(ls output/zips/*.zip | xargs -n1 basename | cut -d'-' -f1 | sort -u)

          for tag in $tags; do
            echo "â–¶ Processing tag: $tag"

            # Find all zip files for this tag
            files=$(ls output/zips/${tag}-*.zip)

            # Gather URLs printed by the R script for this tag
            tag_links=$(grep -i "$tag" console_output.log || echo "No URLs logged for $tag")

            # Build release note
            echo 'This release provides **structured CCNA exam data** covering all modules from CCNA v7.0 curriculum, available in multiple convenient formats for study and programmatic use.  For full details on each format and how to use them, see the [Formats Guide](./readme.md#available-formats).' > tmp_release_note.txt
            echo "Last updated: $(date -u +'%Y-%m-%d')"                                                     >> tmp_release_note.txt
            echo ""                                                                                         >> tmp_release_note.txt
            echo "**ðŸ“š Covered Modules**"                                                                    >> tmp_release_note.txt
            echo ""                                                                                         >> tmp_release_note.txt
            echo "$tag_links"                                                                               >> tmp_release_note.txt

            # Create or update the GitHub Release
            if gh release view "$tag" >/dev/null 2>&1; then
              echo "â†» Updating release $tag"
              gh release edit "$tag" --notes-file tmp_release_note.txt
            else
              echo "âž• Creating release $tag"
              gh release create "$tag" --title "$tag" --notes-file tmp_release_note.txt
            fi

            # Upload each zip as a release asset
            for f in $files; do
              echo "  ðŸ“¦ Uploading $(basename "$f")"
              gh release upload "$tag" "$f" --clobber
            done
          done
