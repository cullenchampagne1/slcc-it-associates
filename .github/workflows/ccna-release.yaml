name: Run CCNA Parse and Update Releases

on:
  push:
    branches:
      - main
    paths:
      - 'R/**'
      - 'formats/**'
      - 'ccna-library-parse.R'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install R packages
        run: |
          Rscript -e 'install.packages(c("rvest", "dplyr", "fs", "zip", "writexl", "stringr", "httr", "jsonlite", "readr", "purrr", "digest"))'

      - name: Run parsing script and capture output
        run: |
          mkdir -p output/zips
          Rscript R/scrpits/ccna-library-parse.R output/zips | tee console_output.log

      - name: Create or update releases and upload files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Generate list of unique tags from filenames
          tags=$(find output/zips -type f -name "*.zip" | sed 's|.*/||' | cut -d'-' -f1 | sort -u)

          for tag in $tags; do
            echo "Processing tag: $tag"

            # Collect files for this tag
            files=$(find output/zips -type f -name "${tag}-*.zip")

            # Build dynamic part: included URLs from log
            tag_links=$(grep -i "$tag" console_output.log || echo "No URLs logged for $tag")

            # Compose release note
            cat > tmp_release_note.txt <<EOF
            This release contains structured CCNA exam data. Each exam is processed and packaged into multiple formats. For full details on each format and how to use them, see the [Formats Guide](./readme.md#available-formats)
            
            included urls:
            $tag_links
            EOF

            echo "$release_note" > tmp_release_note.txt

            # Create or update the release
            if gh release view "$tag" &>/dev/null; then
              echo "Updating release $tag"
              gh release edit "$tag" -F tmp_release_note.txt
            else
              echo "Creating release $tag"
              gh release create "$tag" -t "$tag" -F tmp_release_note.txt
            fi

            # Upload all files for this tag
            for f in $files; do
              echo "Uploading $(basename "$f") to release $tag"
              gh release upload "$tag" "$f" --clobber
            done
          done
